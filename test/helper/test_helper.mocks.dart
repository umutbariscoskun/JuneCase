// Mocks generated by Mockito 5.4.4 from annotations
// in mutlumesaj/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mutlumesaj/core/errors/failures.dart' as _i7;
import 'package:mutlumesaj/features/app/data/datasource/remote/message_remote_datasource.dart'
    as _i4;
import 'package:mutlumesaj/features/app/data/model/message_model.dart' as _i2;
import 'package:mutlumesaj/features/app/domain/entity/message_entity.dart'
    as _i8;
import 'package:mutlumesaj/features/app/domain/repository/message_repository.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMessageModel_0 extends _i1.SmartFake implements _i2.MessageModel {
  _FakeMessageModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MessageRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageRemoteDataSource extends _i1.Mock
    implements _i4.MessageRemoteDataSource {
  MockMessageRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.MessageModel>> getMessages({
    required int? page,
    int? limitForPerPage = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
          {
            #page: page,
            #limitForPerPage: limitForPerPage,
          },
        ),
        returnValue:
            _i5.Future<List<_i2.MessageModel>>.value(<_i2.MessageModel>[]),
      ) as _i5.Future<List<_i2.MessageModel>>);

  @override
  _i5.Future<_i2.MessageModel> updateMessage({
    required String? id,
    required Map<String, dynamic>? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMessage,
          [],
          {
            #id: id,
            #body: body,
          },
        ),
        returnValue: _i5.Future<_i2.MessageModel>.value(_FakeMessageModel_0(
          this,
          Invocation.method(
            #updateMessage,
            [],
            {
              #id: id,
              #body: body,
            },
          ),
        )),
      ) as _i5.Future<_i2.MessageModel>);
}

/// A class which mocks [MessageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageRepository extends _i1.Mock implements _i6.MessageRepository {
  MockMessageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i7.Failure, List<_i8.MessageEntity>>> getMessages(
          {required int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
          {#page: page},
        ),
        returnValue:
            _i5.Future<_i3.Either<_i7.Failure, List<_i8.MessageEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i8.MessageEntity>>(
          this,
          Invocation.method(
            #getMessages,
            [],
            {#page: page},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, List<_i8.MessageEntity>>>);

  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.MessageEntity>> updateMessage(
          {required _i8.MessageEntity? messageEntity}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMessage,
          [],
          {#messageEntity: messageEntity},
        ),
        returnValue:
            _i5.Future<_i3.Either<_i7.Failure, _i8.MessageEntity>>.value(
                _FakeEither_1<_i7.Failure, _i8.MessageEntity>(
          this,
          Invocation.method(
            #updateMessage,
            [],
            {#messageEntity: messageEntity},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, _i8.MessageEntity>>);
}
